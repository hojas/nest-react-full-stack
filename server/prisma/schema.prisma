generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CommentStatus {
  PENDING
  RESOLVED
  REJECTED
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar
  code      String   @unique @db.VarChar
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(6)
  users     User[]
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique @db.VarChar // email as username
  password  String    @db.VarChar
  phone     String    @unique @default("") @db.VarChar
  nickname  String    @unique @default("") @db.VarChar
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  roles     Role[]
  articles  Article[]
  comments  Comment[]
}

model Topic {
  id         Int       @id @default(autoincrement())
  name       String    @unique @db.VarChar
  code       String    @unique @db.VarChar
  orderIndex Int       @default(0)
  createdAt  DateTime  @default(now()) @db.Timestamp(6)
  updatedAt  DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  articles   Article[]
}

model Article {
  id           Int       @id @default(autoincrement())
  title        String    @db.VarChar
  content      String
  topicId      Int
  authorId     Int
  likeCount    Int       @default(0)
  collectCount Int       @default(0)
  createdAt    DateTime  @default(now()) @db.Timestamp(6)
  updatedAt    DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  topic        Topic     @relation(fields: [topicId], references: [id])
  author       User      @relation(fields: [authorId], references: [id])
  tags         Tag[]
  comments     Comment[]
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  articles  Article[]
}

model Comment {
  id        Int           @id @default(autoincrement())
  content   String        @db.VarChar
  authorId  Int
  articleId Int
  status    CommentStatus @default(PENDING)
  parentId  Int?
  createdAt DateTime      @default(now()) @db.Timestamp(6)
  updatedAt DateTime      @default(now()) @updatedAt @db.Timestamp(6)
  author    User          @relation(fields: [authorId], references: [id])
  article   Article       @relation(fields: [articleId], references: [id])
}
